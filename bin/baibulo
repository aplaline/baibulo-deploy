#!/usr/bin/env node

const path = require("path")
const find = require("node-dir")
const branch = require('current-git-branch')

const deployFiles = require('..')

// read command-line parameters
var argv = require('minimist')(process.argv, {
  default: {
    dir: './',
    url: undefined,
    version: undefined,
    method: 'PUT',
  }
})

// show help and exit
if (argv.h || argv.help || argv._.length < 3) {
  console.log([
    'usage: baibulo deploy [options]',
    '',
    '  --dir dir          Directory with content to upload [./]',
    '  --url context      * Root URL to deploy to (for example http://server/assets)',
    '  --method method    Specify method to use to transfer the data (default: PUT)',
    '  --version          Version (defaults to git branch - master==release)',
    '',
    ' * - required option',
  ].join('\n'))
  process.exit(1)
}

// validate and process context
if (!argv.url) {
  console.log('ERROR: no url specified')
  process.exit(2)
}
if (!argv.url.endsWith('/')) {
  argv.url = argv.url + '/'
}

if (!argv.version) {
  argv.version = branch()
  if (argv.version === 'master') {
    argv.version = 'release'
  }
  argv.version = argv.version.replace('/', '-')
}

var operations = {
  deploy () {
    // dump progress to console
    const log = (file, contentType, result) => {
      console.log('OK ' + file + ':' + argv.version + ' (' + contentType + ') ' + result.join(' '))
    }

    const listFiles = new Promise((resolve, reject) => {
      find.files(argv.dir, function(error, files) {
        if (error) reject(error)
        else resolve(files)
      })
    })

    return listFiles.then(files => deployFiles(argv.dir, files, argv.version, argv.url, argv.method, log))
  }
}

// get the operation user requested (default: get)
var operation = operations[argv._[2]]
if (!operation) {
  console.log('Invalid operation specified')
  process.exit(2)
}

// execute operation
operation()
  .then(function() {
    console.log('Operation completed.')
  })
  .catch(function(error) {
    console.log(error)
    process.exit(3)
  })
